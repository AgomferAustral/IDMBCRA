---
title: "TPAle 02"
author: "Gomez Fernandez, Alejandro"
date: "`r Sys.Date()`"
output:
  html:
    toc: true            # Tabla de contenidos
    toc_float: true      # TOC flotante para facilitar la navegación
    number_sections: true # Numera secciones
    theme: cosmo         # Tema visual (puede ser: cosmo, flatly, lumen, etc.)
    highlight: tango     # Resaltado de sintaxis
    self_contained: false # Archivos CSS/JS/imagenes separados, reduce peso HTML
    df_print: paged      # Tablas con paginación
    keep_md: false       # No conserva el markdown intermedio
    code_folding: hide   # Código R oculto por defecto, se puede expandir
editor_options:
  chunk_output_type: console # Muestra output en la consola, más rápido en RStudio
knitr:
  opts_chunk:
    echo: false         # Oculta código por defecto, se puede cambiar en chunks
    cache: true         # Cachea resultados para evitar recalcular
    warning: false      # Oculta warnings
    message: false      # Oculta mensajes
    error: false        # Oculta errores (solo si estás seguro)
    fig.width: 6        # Ancho predeterminado de gráficos
    fig.height: 4       # Alto predeterminado de gráficos
    dpi: 150            # Resolución de gráficos
    fig.align: "center" # Alinea gráficos al centro
    fig.path: "figuras/" # Carpeta para guardar imágenes
    cache.path: "cache/" # Carpeta para el caché
execute:
  cache: true
  freeze: auto
  eval: true
  workers: 4
---

# Introduccion

# Resolución

## Inicializacion del entorno

```{r Inicializacion, cache=TRUE}

options(warn = -1)

# Importar bibliotecas
knitr::opts_chunk$set(echo = TRUE)

listofpackages <- c("corrplot", "dplyr", "FactoMineR", "factoextra", "GGally",
                    "ggfortify", "ggplot2", "ggrepel", "grid", "gridExtra", "gtExtras", 
                    "kableExtra", "knitr", "pastecs", "psych", "readr", "skimr",
                    "tidyverse")
# Cita de Código
# Código tomado de: https://github.com/lkovalevski/textsimilaritiesinR/tree/691b5798553d81a86b6c151557c4a667f8c58643/ejecutarAnalisisTexto.R
# Autor: lkovalevski
#
newPackages <- listofpackages[ !(listofpackages %in% installed.packages()[, "Package"])]
if(length(newPackages)) install.packages(newPackages)
for (paquete in listofpackages) {
  suppressMessages(library(paquete, character.only = TRUE))
}


# Funcion para liberar memoria guardando los dataframes procesados
guardar_y_limpiar <- function(df) {
  # Generamos el nombre del archivo
  nombre_archivo <- deparse(substitute(df))

  # Verificamos si la carpeta "datos_intermedios" existe, si no, crearla
  if (!dir.exists("datos_intermedios")) {
    dir.create("datos_intermedios")
  }
  
  # Creamos la ruta del archivo con extensión .rds
  archivo <- file.path("datos_intermedios", paste0(nombre_archivo, ".rds"))
  
  # Guardamos el dataframe en la carpeta en formato RDS
  saveRDS(df, archivo)
  
  # Borramos el dataframe de la memoria
  rm(list = nombre_archivo, envir = .GlobalEnv)
  
  # Limpiamos la memoria (recolectar basura)
  invisible(gc(full = TRUE))
  
  # Confirmamos con mensaje|
  cat("El archivo se ha guardado como", archivo, "y la memoria ha sido limpiada.\n")
} 


```

## Carga y limpieza de datos

```{r Carga_y_limpieza, cache=TRUE}

# Abrimos el archivo que se encuentra en la carpeta datos_entrada
archivo_datos <- readRDS("./datos_entrada/df_bcra_individuals.rds")

# Describimos el dataset

skimr::skim(archivo_datos)
knitr::kable(str(archivo_datos))
knitr::kable(t(head(archivo_datos)))

# Vemos las columnas con datos nulos o faltantes
columnas_con_nulos <- archivo_datos %>%
  summarise(across(everything(), ~ sum(is.na(.)))) %>%
  pivot_longer(cols = everything(), names_to = "columna", values_to = "num_nulos") %>%
  filter(num_nulos > 0)

knitr::kable(columnas_con_nulos)

# Eliminamos el objeto temporal
rm(columnas_con_nulos)


```

### Preprocesamiento de datos

```{r Preprocesamiento, cache=TRUE}


# Hacemos una copia del dataset para trabajar, manteniendo el original

df_datos <- archivo_datos

guardar_y_limpiar(archivo_datos)



# Nos aseguramos que las columnas numéricas solo contienen datos numéricos

df_datos <- df_datos %>%
    mutate(across(where(is.numeric), ~ as.numeric(as.character(.))))


# Nos aseguramos que las columnas especificadas sean de tipo categórico
df_datos <- df_datos %>%
    mutate(across(c(tipo_persona, n_deudas_actual, situacion_mes_actual, tiene_garantia_actual, 
                  max_situacion_mes, max_sit_mes_con_garantia, max_sit_mes_sin_garantia, 
                  peor_situacion_respuesta, mora_mayor_30_dias, default), as.factor))

# Verificamos la estructura del dataset después de las conversiones
str(df_datos)


# Recodificamos Tipo_persona

df_datos <- df_datos %>%
  mutate(
    sexo_cat = case_when(
      tipo_persona == 20 ~ "Hombre",
      tipo_persona == 27 ~ "Mujer",
      tipo_persona %in% c(23, 24) ~ "Desconocido"
    ),
    sexo_num = case_when(
      tipo_persona == 20 ~ 0,  # Hombre → 0
      tipo_persona == 27 ~ 1,  # Mujer → 1
      tipo_persona %in% c(23, 24) ~ 2  # Desconocido → 2
    )
  )


# Eliminar la columna id_individuo
df_datos <- df_datos %>%
  select(-id_individuo)

# Hacemos un análisis exploratorio inicial de las variables
gt_plt_summary(df_datos, title="Figura 1. Análisis exploratorio inicial de las variables en conjunto excluyendo deudas mayores a 100000")


skimr::skim(df_datos)

# Vemos las columnas con datos nulos o faltantes
columnas_con_nulos <- df_datos %>%
    summarise_all(~ sum(is.na(.))) %>%
    pivot_longer(cols = everything(), names_to = "columna", values_to = "num_nulos") %>%
    filter(num_nulos > 0)

knitr::kable(columnas_con_nulos)

# Eliminamos el objeto temporal
rm(columnas_con_nulos)


#############################################################
# Creamos una nueva categoría [0: No aplica] para la variable max_sit_mes_con_garantia para aquellos 
# registros que no tienen deuda con garantía y tienen valor NA
#############################################################


# Asignamos 0 a max_sit_mes_con_garantia si deuda_con_garantia_actual es 0 y max_sit_mes_con_garantia es NA
df_datos <- df_datos %>%
    mutate(max_sit_mes_con_garantia = ifelse(is.na(max_sit_mes_con_garantia) & deuda_con_garantia_actual == 0, 0, max_sit_mes_con_garantia))

# Volver a ver las columnas con datos nulos o faltantes
columnas_con_nulos <- df_datos %>%
    summarise_all(~ sum(is.na(.))) %>%
    pivot_longer(cols = everything(), names_to = "columna", values_to = "num_nulos") %>%
    filter(num_nulos > 0)

knitr::kable(columnas_con_nulos)

# Eliminamos el objeto temporal
rm(columnas_con_nulos)

# Filtramos y seleccionamos las columnas deseadas para registros con max_sit_mes_sin_garantia = NA
registros_con_na <- df_datos %>%
    filter(is.na(max_sit_mes_sin_garantia)) %>%
    select(deuda_total_actual, deuda_con_garantia_actual, prop_con_garantia_actual, tiene_garantia_actual, max_sit_mes_sin_garantia)

# Verificamos los registros filtrados
knitr::kable(head(registros_con_na))

# Eliminamos el objeto temporal
rm(registros_con_na)


# Asignamos 0 a max_sit_mes_sin_garantia si prop_con_garantia_actual es 1 y max_sit_mes_sin_garantia es NA
df_datos <- df_datos %>%
    mutate(max_sit_mes_sin_garantia = ifelse(is.na(max_sit_mes_sin_garantia) & prop_con_garantia_actual == 1, 0, max_sit_mes_sin_garantia))

# Volvemos a ver las columnas con datos nulos o faltantes
columnas_con_nulos <- df_datos %>%
    summarise_all(~ sum(is.na(.))) %>%
    pivot_longer(cols = everything(), names_to = "columna", values_to = "num_nulos") %>%
    filter(num_nulos > 0)

# Verificamos que ya no quedan valores nulos
knitr::kable(columnas_con_nulos)

# Eliminamos el objeto, ahora vacio
rm(columnas_con_nulos)


#############################################################
# Cita de código
## Licencia: desconocida
## Autor: Arena, Cristian
## Actualización: Ajuste con parámetros de corte y coeficientes propios
#############################################################


# Función para calcular el rango de edad
calcular_rango_edad_2019 <- function(proxy_edad_actual) {
  if (is.na(proxy_edad_actual)) {
    return(NA)
  }
  
  # Calculamos año de nacimiento
  if (proxy_edad_actual >= 500) {
    anio_nacimiento <- 2010 + floor((proxy_edad_actual - 500)/10)
  } else if (proxy_edad_actual >= 424) {
    anio_nacimiento <- 2000 + floor((proxy_edad_actual - 424)/7.6)
  } else if (proxy_edad_actual >= 284) {
    anio_nacimiento <- 1980 + floor((proxy_edad_actual - 284)/7)
  } else if (proxy_edad_actual >= 217) {
    anio_nacimiento <- 1970 + floor((proxy_edad_actual - 217)/6.7)
  } else if (proxy_edad_actual >= 142) {
    anio_nacimiento <- 1960 + floor((proxy_edad_actual - 142)/7.5)
  } else if (proxy_edad_actual >= 45) {
    anio_nacimiento <- 1940 + floor((proxy_edad_actual - 45)/4.85)
  } else {
    anio_nacimiento <- 1920 + floor((proxy_edad_actual - 20) / 1.25)
  }
  
  # Calculamos edad en 2019
  edad_2019 <- 2019 - anio_nacimiento
  
  # Asignamos rango de edad
  if (edad_2019 < 20) {
    rango_edad <- "<20"
  } else if (edad_2019 <= 30) {
    rango_edad <- "20-29"
  } else if (edad_2019 <= 40) {
    rango_edad <- "30-39"
  } else if (edad_2019 <= 50) {
    rango_edad <- "40-49"
  } else if (edad_2019 <= 60) {
    rango_edad <- "50-60"
  } else {
    rango_edad <- ">60"
  }
  
  return(rango_edad)
}

# Creamos nueva columna con rango de edad calculado para cada individuo

df_datos <- df_datos %>%
  mutate(rango_edad_2019 = map(proxy_edad_actual, calcular_rango_edad_2019) %>% unlist())

# Mostramos un resumen de los resultados
print("Resumen de rangos de edad al 2019:")
knitr::kable(table(df_datos$rango_edad_2019))

# Mostramos algunas filas de ejemplo
print("Ejemplos de registros con el rango de edad al 2019:")
knitr::kable(head(df_datos[, c("proxy_edad_actual", "rango_edad_2019")]))


df_datos <- df_datos %>%
  mutate(
    cat_edad = case_when(
      rango_edad_2019 == "<20"    ~ 0,
      rango_edad_2019 == "20-29"  ~ 1,
      rango_edad_2019 == "30-39"  ~ 2,
      rango_edad_2019 == "40-49"  ~ 3,
      rango_edad_2019 == "50-60"  ~ 4,
      TRUE                        ~ 5  # Cualquier otro valor
    )
  )


# Aseguramos que la columna rango_edad_2019 sea de tipo categórico
df_datos <- df_datos %>%
    mutate(rango_edad_2019 = as.factor(rango_edad_2019),
          sexo_cat = as.factor(sexo_cat)
          )


```

### Seleccionamos el conjunto de datos para trabajar

```{r Seleccion_datos, cache=TRUE}

#############################################################
#
# Verificamos la cantidad de registros que no cumplen la condición del enunciado
#
#    Con respecto al trabajo final les queríamos avisar que si bien en el
#    enunciado dice que la muestra utilizada está compuesta por cuits cuyo 
#    "monto total adeudado en ese momento no superaba los 100.000 pesos 
#    argentinos.", en la base quedaron algunos casos (1705) que sí tienen 
#    deuda total en junio 2019 mayor a 100.000.
# 
#############################################################

cant <- sum(df_datos$deuda_total_actual > 100, na.rm = TRUE)
print(paste("Cantidad de registros estrictamente mayores a 100:", cant))

cant <- sum(df_datos$deuda_total_actual >= 100, na.rm = TRUE)
print(paste("Cantidad de registros mayores o iguales a 100:", cant))

#############################################################
# Y porque los números están redondeados a miles, voy a filtrar los valores
# mayores o iguales a 100 en el campo deuda_total_actual, luego de 
# verificar que a esa condición 1705 registros la cumplen.
#############################################################

# Filtramos filas con deuda_total_actual mayor a 100
filas_con_deuda_mayor_100 <- df_datos %>%
    filter(deuda_total_actual >= 100)

# Excluir registros con deuda_total_actual mayor a 100
df_seleccionados <- df_datos %>%
    filter(deuda_total_actual < 100)

# Vemos las filas con deuda_total_actual mayor a 100
knitr::kable(head(filas_con_deuda_mayor_100))

# Eliminamos dataframe con deudas mayores ao iguales a 100
rm(filas_con_deuda_mayor_100)

# Guardamos el dataframe procesado con todos los datos 
guardar_y_limpiar(df_datos)

```






## Comenzamos el analisis exploratorio

```{r EDA, cache=TRUE}


# Hacemos un análisis exploratorio inicial de las variables
gt_plt_summary(df_seleccionados, title="Figura 2. Análisis exploratorio inicial de las variables en conjunto excluyendo deudas mayores a 100000, sin valores nulos")


```
### Análisis univariado

```{r Analisis_univariado, cache=TRUE}

# Obtenemos estadisticos
df2 <- pastecs::stat.desc(df_seleccionados) %>% as.matrix %>% as.data.frame %>% round(2)

# Eliminamos columnas con NA -> categóricas
df2_limpia <- df2 %>%
    select(where(~ !any(is.na(.))))

df2_limpia <- format(df2_limpia, scientific = FALSE)

knitr::kable(t(data.frame(df2_limpia)), digits = 2)

# Utilizamos la función skim para describir la distribución univariada de cada columna
skimr::skim(df2_limpia)

# Guardamos el archivo con datos de la distribucion
guardar_y_limpiar(df2)
guardar_y_limpiar(df2_limpia)



```

#### Hacemos graficos de distribucion

```{r Graficos, cache=TRUE}

#############################################################
# Calculamos el número óptimo de bins (intervalos) para el histograma utilizando 
# la regla de Freedman-Diaconis a través de la función nclass.FD del paquete MASS

# La Regla de Freedman-Diaconis es un método para determinar el tamaño óptimo de 
# los bins (intervalos) en un histograma. Busca un balance entre precisión y suavidad
# en la distribución de los datos, evitando histogramas con demasiados o muy pocos bins.

# Fórmula de Freedman-Diaconis
# Bin width=2×IQRn1/3
# Bin width=2×n1/3IQR​

# Donde:

#    IQR = Rango intercuartílico (diferencia entre el cuartil 3 y el cuartil 1).
#    n = Número total de observaciones (tamaño de la muestra).
#    Bin width = Ancho del intervalo del histograma.

# 📌 ¿Por qué se usa el IQR?

#    Es robusto frente a valores atípicos (outliers).
#    Proporciona una mejor representación de la dispersión de los datos que la
#    desviación estándar.
#############################################################



# Función para crear gráficos de distribución
plot_distribution <- function(data, column) {
  if (is.numeric(data[[column]])) {
    # Calculamos el número óptimo de bins usando la regla de Freedman-Diaconis
    num_bins <- nclass.FD(data[[column]])
    ggplot(data, aes(x = .data[[column]])) +
      geom_histogram(bins = num_bins, fill = "blue", color = "black") +
      labs(title = paste("Distribución de", column), x = column, y = "Frecuencia") +
      theme_minimal()+
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  } else if (is.factor(data[[column]])) {
    ggplot(data, aes(x = .data[[column]])) +
      geom_bar(fill = "blue", color = "black") +
      labs(title = paste("Distribución de", column), x = column, y = "Frecuencia") +
      theme_minimal()+
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  }
}

# Creamos una lista de gráficos de distribución para cada columna
plots <- map(colnames(df_seleccionados), ~ plot_distribution(df_seleccionados, .x))


# Presentamos los gráficos en una matriz
do.call(grid.arrange, c(plots, ncol = 3))



# Función para crear boxplots
plot_boxplot <- function(data, column) {
  ggplot(data, aes(y = .data[[column]])) +
    geom_boxplot(fill = "blue", color = "black") +
    labs(title = paste("Boxplot de", column), y = column) +
    theme_minimal()+
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
}

# Creamos una lista de gráficos de boxplot para cada columna numérica
boxplots <- map(names(df_seleccionados), ~ {
  if (is.numeric(df_seleccionados[[.x]])) {
    plot_boxplot(df_seleccionados, .x)
  } else {
    NULL
  }
}) %>% compact()

# Presentamos los gráficos en una matriz
do.call(grid.arrange, c(boxplots, ncol = 3))

# Guardamos la lista de los boxplots
guardar_y_limpiar(boxplots)

```




### Outliers

```{r Outliers, cache=TRUE}

# Outliers

# Función para identificar outliers usando el IQR
identify_outliers <- function(data, column) {
  Q1 <- quantile(data[[column]], 0.25, na.rm = TRUE)
  Q3 <- quantile(data[[column]], 0.75, na.rm = TRUE)
  IQR <- Q3 - Q1
  lower_bound <- Q1 - 1.5 * IQR
  upper_bound <- Q3 + 1.5 * IQR
  outliers <- data %>%
    filter(.data[[column]] < lower_bound | .data[[column]] > upper_bound)
  return(outliers)
}

# Identificamos outliers para cada columna numérica
outliers_list <- map(names(df_seleccionados), ~ {
  if (is.numeric(df_seleccionados[[.x]])) {
    outliers <- identify_outliers(df_seleccionados, .x)
    if (nrow(outliers) > 0) {
      return(list(column = .x, outliers = outliers))
    }
  }
  return(NULL)
}) %>% compact()

# Mostramos los outliers identificados
walk(outliers_list, ~ {
  cat("Outliers en la columna:", .x$column, "\n")
  
  # Ordenamos los outliers de menor a mayor
  sorted_outliers <- .x$outliers %>% arrange(.data[[.x$column]])
  
  # Mostramos los 5 outliers más bajos
  cat("5 outliers más bajos:\n")
  print(head(sorted_outliers, 5))
  
  # Mostramos los 5 outliers más altos
  cat("5 outliers más altos:\n")
  print(tail(sorted_outliers, 5))
  
  # Mostramos la cantidad total de outliers
  cat("Cantidad total de outliers:", nrow(.x$outliers), "\n\n")
})

# Borramos la lista de outliers
guardar_y_limpiar(outliers_list)


```

### Correlaciones

```{r Correlaciones, cache=TRUE}

# Correlaciones


#############################################################
# Eliminamos las columnas categoricas no ordinales y hacer ordinales aquellas 
# que puedan serlo
#############################################################


# Filtramos las columnas numéricas del DataFrame
col_numericas <- df_seleccionados %>%
  select_if(is.numeric)

# Calculamos la matriz de correlaciones
matriz_corr <- cor(col_numericas, use = "complete.obs")

# Mostramos la matriz de correlaciones
print(matriz_corr)

# Visualizamos la matriz de correlaciones
corrplot(matriz_corr, method = "color", type = "upper", 
        tl.col = "black", tl.srt = 45, addCoef.col = "black")


# Guardamos el gráfico en un archivo PNG
png("pairs_panels.png", width = 1200, height = 1200)
par(mar = c(2, 2, 2, 2))
options(repr.plot.width = 10, repr.plot.height = 8)  # Ajusta el ancho y alto

# Creamos el gráfico de pares
pairs.panels(
  col_numericas,
  method = "pearson",  # correlation
  hist.col = "#00AFBB",
  density = TRUE,      # show density
  ellipses = T     # show correlation ellipses
)

# Cerramos el dispositivo PNG
dev.off()


# Gráfico de pares alternativo
ggpairs(
  col_numericas,
  title = "Gráfico de Pares de Variables Numéricas",
  upper = list(continuous = wrap("cor", size = 4)),
  lower = list(continuous = wrap("smooth", alpha = 0.5, size = 0.1)),
  diag = list(continuous = wrap("barDiag", fill = "blue", color = "black")),
  axisLabels = "show"
) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


# Borramos la matriz que ya no usamos
guardar_y_limpiar(matriz_corr)

# Guardamos las imagenes que ya no usamos
guardar_y_limpiar(plots)

```







### PCA

```{r PCA, cache=TRUE}

# PCA

# Realizar el análisis de componentes principales (PCA)
pca_result <- prcomp(col_numericas, scale. = TRUE)

# Resumen del PCA
summary(pca_result)

# Porcentaje de la variabilidad total explicada por las dos primeras componentes
var_explicada <- summary(pca_result)$importance[2, 1:2]
cat("Porcentaje de la variabilidad total explicada por las dos primeras componentes:\n")
print(var_explicada)

# Creamos un DataFrame con las componentes principales
pca_df <- as.data.frame(pca_result$x)

# Añadimos la columna tipo_persona al DataFrame de PCA
pca_df <- pca_df %>%
  mutate(sexo_cat = df_seleccionados$sexo_cat)

# Visualizamos las dos primeras componentes principales
ggplot(pca_df, aes(x = PC1, y = PC2, color = sexo_cat)) +
  geom_point(alpha = 0.5) +
  labs(title = "PCA: Primeras dos componentes principales",
      x = "Componente Principal 1",
      y = "Componente Principal 2") +
  theme_minimal()

# Interpretación de los componentes
cat("Cargas de las variables en las dos primeras componentes:\n")
print(pca_result$rotation[, 1:2])


df_seleccionados <- df_seleccionados %>%
    mutate(sexo_num = as.factor(sexo_num),
        cat_edad = as.factor(cat_edad))

plot_pca <- autoplot(pca_result, 
        data = df_seleccionados, 
        colour = 'sexo_cat', 
        loadings = TRUE, 
        loadings.label = TRUE, 
        loadings.label.size = 3)

plot_pca + scale_color_manual(values = c("Mujer" = "green", "Hombre" = "blue", "Desconocido" = "red"))


```

## 
```{r}


```

## 

```{r}

```